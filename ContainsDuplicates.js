// 219. Contains Duplicate II
// Easy
// Topics
// Companies
// Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

// Example 1:

// Input: nums = [1,2,3,1], k = 3
// Output: true
// Example 2:

// Input: nums = [1,0,1,1], k = 1
// Output: true
// Example 3:

// Input: nums = [1,2,3,1,2,3], k = 2
// Output: false
 

// Constraints:

// 1 <= nums.length <= 105
// -109 <= nums[i] <= 109
// 0 <= k <= 105

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var containsNearbyDuplicate = function(nums, k) {
    let seen = new Map()

    for (let i = 0; i < nums.length; i++){
        if (seen.has(nums[i]) && i - seen.get(nums[i]) <= k ){
            return true
        }
        seen.set(nums[i], i)
    }
    
    return false

};



// we create a new and use a for loop to itterate through the use of our indicies. if our current num[i] is present in the map, 
// and our distance from the last it was entered is less than k, we can return true, otherwise we need to update our map 
// and set the the current number with its indices. 

// Code
// Testcase
// Testcase
// Test Result
// 389. Find the Difference
// Easy
// Topics
// Companies
// You are given two strings s and t.

// String t is generated by random shuffling string s and then add one more letter at a random position.

// Return the letter that was added to t.

 

// Example 1:

// Input: s = "abcd", t = "abcde"
// Output: "e"
// Explanation: 'e' is the letter that was added.
// Example 2:

// Input: s = "", t = "y"
// Output: "y"
 

// Constraints:

// 0 <= s.length <= 1000
// t.length == s.length + 1
// s and t consist of lowercase English letters.

/**
 * @param {string} s
 * @param {string} t
 * @return {character}
 */
var findTheDifference = function(s, t) {
    let count = {}

    for (let char of s){
        count[char] = (count[char] || 0) + 1
    }

    for ( let char of t){
        if (!count[char]){
            return char
        } else count[char]--
    }
};


// for this problem we create a hashmap and then run through it with our t taking away each letters count until we find
// the letter that finds our count to be at 0, we then know that that will be our extra character and return that.